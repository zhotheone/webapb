// –¢—Ä–µ–∫–µ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ - –†–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Steam, Rozetka —Ç–∞ Comfy
let trackedItems = [];
let currentUserId = '594235906'; // –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∏ Telegram WebApp

function debugAPI(message) {
    console.log(`üîç [–¢—Ä–µ–∫–µ—Ä –ù–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è] ${message}`);
}

// –°—Ç–∞–Ω —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫–µ—Ä–∞
let trackerFilters = {
    platform: 'all',
    sale: false
};

let trackerSort = {
    field: 'dateAdded',
    order: 'desc'
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
document.addEventListener('DOMContentLoaded', function() {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (telegram.initDataUnsafe && telegram.initDataUnsafe.user) {
        currentUserId = telegram.initDataUnsafe.user.id.toString();
    }
    
    setupTracker();
    setupTrackerFilters();
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
function loadTrackerItems() {
    debugAPI("loadTrackerItems –≤–∏–∫–ª–∏–∫–∞–Ω–∞");
    fetchTrackedItems();
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫–µ—Ä–∞
function setupTracker() {
    const trackerInput = document.getElementById('trackerInput');
    const addTrackerBtn = document.getElementById('addTrackerBtn');
    
    if (!trackerInput || !addTrackerBtn) return;
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –ø–æ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    addTrackerBtn.addEventListener('click', () => {
        addTrackedItem();
    });
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ Enter
    trackerInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTrackedItem();
        }
    });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç—Ä–µ–∫–µ—Ä–∞
function setupTrackerFilters() {
    // –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    const filterButtons = document.querySelectorAll('.tracker-filter-btn');
    const sortSelect = document.getElementById('trackerSort');
    
    if (!filterButtons.length || !sortSelect) return;
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ –∫–Ω–æ–ø–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const filterType = button.getAttribute('data-filter');
            
            // –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ (all, steam, rozetka, comfy)
            if (['all', 'steam', 'rozetka', 'comfy'].includes(filterType)) {
                // –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —É —Ü—ñ–π –≥—Ä—É–ø—ñ
                button.parentNode.querySelectorAll('.tracker-filter-btn').forEach(btn => {
                    if (['all', 'steam', 'rozetka', 'comfy'].includes(btn.getAttribute('data-filter'))) {
                        btn.classList.remove('active');
                    }
                });
                
                // –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
                button.classList.add('active');
                
                // –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
                trackerFilters.platform = filterType;
            }
            
            // –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑–Ω–∏–∂–æ–∫
            if (filterType === 'sale') {
                // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å
                button.classList.toggle('active');
                
                // –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–Ω–∏–∂–æ–∫
                trackerFilters.sale = button.classList.contains('active');
            }
            
            // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            applyFiltersAndSort();
        });
    });
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    if (sortSelect) {
        sortSelect.addEventListener('change', () => {
            const [field, order] = sortSelect.value.split('_');
            
            // –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            trackerSort.field = field;
            trackerSort.order = order;
            
            // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            applyFiltersAndSort();
        });
    }
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
function applyFiltersAndSort() {
    // –°–ø–æ—á–∞—Ç–∫—É —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
    let filteredItems = [...trackedItems];
    
    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é
    if (trackerFilters.platform !== 'all') {
        filteredItems = filteredItems.filter(item => 
            item.platform === trackerFilters.platform
        );
    }
    
    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é –∑–Ω–∏–∂–∫–∏
    if (trackerFilters.sale) {
        filteredItems = filteredItems.filter(item => 
            item.status === 'sale'
        );
    }
    
    // –ü–æ—Ç—ñ–º —Å–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
    filteredItems.sort((a, b) => {
        // –û–±—Ä–∞—Ç–∏ –ø–æ–ª—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        let aValue, bValue;
        
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        switch (trackerSort.field) {
            case 'dateAdded':
                aValue = new Date(a.dateAdded || a.updatedAt || 0);
                bValue = new Date(b.dateAdded || b.updatedAt || 0);
                break;
            case 'price':
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—ñ–Ω—É –∑—ñ –∑–Ω–∏–∂–∫–æ—é, —è–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
                aValue = a.status === 'sale' ? (a.salePrice || 0) : (a.price || 0);
                bValue = b.status === 'sale' ? (b.salePrice || 0) : (b.price || 0);
                break;
            case 'salePercent':
                aValue = a.salePercent || 0;
                bValue = b.salePercent || 0;
                break;
            default:
                aValue = a[trackerSort.field] || 0;
                bValue = b[trackerSort.field] || 0;
        }
        
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const sortOrder = trackerSort.order === 'asc' ? 1 : -1;
        
        // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if (aValue < bValue) return -1 * sortOrder;
        if (aValue > bValue) return 1 * sortOrder;
        return 0;
    });
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    renderFilteredItems(filteredItems);
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
function renderFilteredItems(items) {
    const trackedItemsContainer = document.getElementById('trackedItems');
    if (!trackedItemsContainer) return;
    
    if (items.length === 0) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ç–æ–≤–∞—Ä–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É, –∞–ª–µ –≤–æ–Ω–∏ –±—É–ª–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ
        if (trackedItems.length > 0) {
            trackedItemsContainer.innerHTML = '<p class="no-items-message">–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∞–º üîç</p>';
        } else {
            trackedItemsContainer.innerHTML = '<p class="no-items-message">–ù–µ–º–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ üõí</p>';
        }
        return;
    }
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    trackedItemsContainer.innerHTML = '';
    
    // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
    items.forEach((item, index) => {
        renderTrackedItem(item, index, trackedItemsContainer);
    });
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    addTrackedItemEventListeners();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ API
async function fetchTrackedItems() {
    const trackedItemsContainer = document.getElementById('trackedItems');
    if (!trackedItemsContainer) {
        debugAPI("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä trackedItems –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    trackedItemsContainer.innerHTML = `
        <div class="loading-spinner">
            <span class="material-icons rotating">refresh</span>
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...</p>
        </div>
    `;
    
    try {
        // –ü–æ–≤–Ω–∏–π URL API –¥–ª—è –∑—Ä–æ–∑—É–º—ñ–ª–æ–≥–æ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        const apiUrl = API_CONFIG.getApiUrl(`tracker/${currentUserId}`);
        debugAPI(`–í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç: GET ${apiUrl}`);
        
        // –ó–∞–ø–∏—Ç –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ API
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ API
        const data = await response.json();
        debugAPI(`–û—Ç—Ä–∏–º–∞–Ω–æ ${data.length} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ API`);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
        trackedItems = Array.isArray(data) ? data : [];
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        applyFiltersAndSort();
    } catch (error) {
        debugAPI(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}`);
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:', error);
        trackedItemsContainer.innerHTML = `
            <div class="tracker-error">
                <span class="material-icons">error_outline</span>
                <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ üò¢</p>
                <p class="error-details">${error.message}</p>
                <button id="retryTrackerBtn" class="button">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
            </div>
        `;
        
        // –î–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const retryBtn = document.getElementById('retryTrackerBtn');
        if (retryBtn) {
            retryBtn.addEventListener('click', () => {
                fetchTrackedItems();
            });
        }
    }
}

// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä
async function addTrackedItem() {
    const trackerInput = document.getElementById('trackerInput');
    const addTrackerBtn = document.getElementById('addTrackerBtn');
    
    if (!trackerInput || trackerInput.value.trim() === '') {
        debugAPI("–ü–æ–ª–µ –≤–≤–æ–¥—É –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
    }
    
    const url = trackerInput.value.trim();
    debugAPI(`–î–æ–¥–∞–≤–∞–Ω–Ω—è URL: ${url}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É URL
    if (!isValidURL(url)) {
        API_CONFIG.showToast('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL —Ç–æ–≤–∞—Ä—É ‚ö†Ô∏è');
        debugAPI("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL —Ñ–æ—Ä–º–∞—Ç");
        return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ URL –Ω–∞–ª–µ–∂–∏—Ç—å –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ
    const platform = getPlatformFromURL(url);
    if (!platform) {
        API_CONFIG.showToast('–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Ç–æ–≤–∞—Ä–∏ Steam, Rozetka —Ç–∞ Comfy üõí');
        debugAPI("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞");
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    addTrackerBtn.disabled = true;
    addTrackerBtn.innerHTML = '<span class="material-icons rotating">refresh</span>';
    debugAPI("–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API");
    
    try {
        // –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–∏–π URL –¥–ª—è API
        const apiUrl = API_CONFIG.getApiUrl(`tracker/add`);
        debugAPI(`–í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç: POST ${apiUrl}`);
        
        // –í–∏–∫–ª–∏–∫ API –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: currentUserId,
                url: url
            })
        });
        
        const responseText = await response.text();
        debugAPI(`–í—ñ–¥–ø–æ–≤—ñ–¥—å API (—Ç–µ–∫—Å—Ç): ${responseText}`);
        
        let data;
        try {
            // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
            data = JSON.parse(responseText);
        } catch (jsonError) {
            debugAPI(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: ${jsonError.message}`);
            throw new Error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseText}`);
        }
        
        if (!response.ok) {
            throw new Error(data.error || `–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
        }
        
        debugAPI(`–£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API: ${JSON.stringify(data)}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
        if (data.alreadyOnSale) {
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂
            API_CONFIG.showCustomDialog({
                title: 'üí∏ –¢–æ–≤–∞—Ä –≤–∂–µ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ!',
                message: `"${data.saleDetails.productName}" –≤–∂–µ —É –∑–Ω–∏–∂—Ü—ñ!
                
–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞: ${data.saleDetails.originalPrice} ${getPlatformCurrency(platform)}
–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: ${data.saleDetails.salePrice} ${getPlatformCurrency(platform)}
–ó–Ω–∏–∂–∫–∞: ${data.saleDetails.salePercent}%`,
                buttons: [
                    {id: 'add', type: 'default', text: '–í—Å–µ –æ–¥–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ üîç'},
                    {id: 'cancel', type: 'cancel', text: '–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚úñÔ∏è'},
                ]
            }, function(buttonId) {
                if (buttonId === 'add') {
                    addItemThatIsAlreadyOnSale(url);
                }
                trackerInput.value = '';
            });
        } else if (data.success || data._id) {
            // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö
            if (data.item) {
                trackedItems.push(data.item);
            } else {
                // –Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–≤–∞—Ä —É —ñ–Ω—à–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
                trackedItems.push(data);
            }
            
            // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥—É
            trackerInput.value = '';
            
            // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            applyFiltersAndSort();
            
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            API_CONFIG.showToast('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è ‚úÖ');
            debugAPI("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ");
        } else {
            throw new Error(data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API');
        }
    } catch (error) {
        debugAPI(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: ${error.message}`);
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É:', error);
        
        if (error.message.includes('Unsupported website')) {
            API_CONFIG.showToast('–í–∏–±–∞—á—Ç–µ, –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ Steam, Comfy —Ç–∞ Rozetka ‚ö†Ô∏è');
        } else {
            API_CONFIG.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ‚ùå');
        }
    } finally {
        // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
        addTrackerBtn.disabled = false;
        addTrackerBtn.innerHTML = '<span class="material-icons">add</span>';
        debugAPI("–°—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
    }
}

// –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä, —è–∫–∏–π –≤–∂–µ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
async function addItemThatIsAlreadyOnSale(url) {
    try {
        // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        API_CONFIG.showToast('–î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä...');
        
        const response = await fetch(API_CONFIG.getApiUrl(`tracker/add/force`), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: currentUserId,
                url: url
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è');
        }
        
        const data = await response.json();
        
        // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö
        trackedItems.push(data);
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        applyFiltersAndSort();
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        API_CONFIG.showToast('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è ‚úÖ');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error);
        API_CONFIG.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ‚ùå');
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
function renderTrackedItems() {
    // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    applyFiltersAndSort();
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
function renderTrackedItem(item, index, container) {
    const itemElement = document.createElement('div');
    itemElement.className = 'tracked-item';
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±–æ id —Ç–æ–≤–∞—Ä—É, –∞–±–æ _id –∑ MongoDB
    const itemId = item.id || item._id || item.productId;
    itemElement.setAttribute('data-id', itemId);
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
    let priceChangeIndicator = '';
    
    if (item.status === 'sale') {
        // –¢–æ–≤–∞—Ä –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∑–Ω–∏–∂–∫—É
        const changeClass = 'positive';
        const changeIcon = 'arrow_downward';
        
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –µ–∫–æ–Ω–æ–º—ñ—ó
        const savedAmount = item.price - item.salePrice;
        
        priceChangeIndicator = `
            <span class="price-change ${changeClass}">
                <span class="material-icons">${changeIcon}</span>
                -${item.salePercent}% (-${savedAmount.toFixed(2)} ${item.currency || getPlatformCurrency(item.platform)})
            </span>
        `;
    } else if (item.priceChange && item.priceChange !== 0) {
        // –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –Ω–µ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
        const changeClass = item.priceChange > 0 ? 'negative' : 'positive';
        const changeIcon = item.priceChange > 0 ? 'arrow_upward' : 'arrow_downward';
        const changeAmount = Math.abs(item.priceChange).toFixed(2);
        
        priceChangeIndicator = `
            <span class="price-change ${changeClass}">
                <span class="material-icons">${changeIcon}</span>
                ${changeAmount} ${item.currency || getPlatformCurrency(item.platform)}
            </span>
        `;
    }
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    const platformIcon = getPlatformIcon(item.platform);
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ ID —Ç–æ–≤–∞—Ä—É
    const bgColor = getRandomColor(itemId);
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±–æ productName, –∞–±–æ title
    const productName = item.productName || item.title || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä';
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    let displayPrice = '';
    if (item.status === 'sale') {
        displayPrice = `${item.salePrice} ${item.currency || getPlatformCurrency(item.platform)}`;
    } else {
        displayPrice = `${item.price || 0} ${item.currency || getPlatformCurrency(item.platform)}`;
    }
    
    // –î–æ–¥–∞—Ç–∏ –±–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å—É, —è–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ –∞–±–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π
    let statusBadge = '';
    if (item.status === 'sale') {
        statusBadge = `<div class="tracked-item-status sale">-${item.salePercent}%</div>`;
    } else if (item.status === 'free') {
        statusBadge = '<div class="tracked-item-status free">–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</div>';
    }
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—É
    itemElement.innerHTML = `
        ${statusBadge}
        <div class="tracked-item-image" style="background-color: ${bgColor}">
            <span class="material-icons" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 24px; color: rgba(255,255,255,0.7);">
                ${platformIcon}
            </span>
        </div>
        <div class="tracked-item-info">
            <div class="tracked-item-title">${productName}</div>
            <div class="tracked-item-price">
                ${displayPrice}
                ${priceChangeIndicator}
            </div>
            <div class="tracked-item-details">
                <span class="tracked-item-category">
                    <span class="material-icons">category</span>
                    ${item.category || getPlatformName(item.platform)}
                </span>
                <span>
                    <span class="material-icons">update</span>
                    ${formatTimeAgo(item.dateAdded || item.updatedAt)}
                </span>
            </div>
        </div>
        <button class="tracked-item-remove" data-id="${itemId}">
            <span class="material-icons">delete</span>
        </button>
    `;
    
    // –î–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container.appendChild(itemElement);
    
    // –î–æ–¥–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–æ—è–≤–∏
    setTimeout(() => {
        itemElement.style.opacity = '0';
        itemElement.style.transform = 'translateX(-20px)';
        itemElement.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
        
        setTimeout(() => {
            itemElement.style.opacity = '1';
            itemElement.style.transform = 'translateX(0)';
        }, 10);
    }, 50 * index);
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤
function addTrackedItemEventListeners() {
    const trackedItemsContainer = document.getElementById('trackedItems');
    if (!trackedItemsContainer) return;
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    const removeButtons = trackedItemsContainer.querySelectorAll('.tracked-item-remove');
    removeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.stopPropagation();
            const itemId = button.getAttribute('data-id');
            removeTrackedItem(itemId);
        });
    });
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏
    const itemElements = trackedItemsContainer.querySelectorAll('.tracked-item');
    itemElements.forEach(item => {
        item.addEventListener('click', () => {
            const id = item.getAttribute('data-id');
            const trackedItem = trackedItems.find(i => (i.id === id || i._id === id || i.productId === id));
            if (trackedItem) {
                showItemDetails(trackedItem);
            }
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É
function showItemDetails(item) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ productName –∞–±–æ title
    const productName = item.productName || item.title || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä';
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤–∞–ª—é—Ç—É
    const currency = item.currency || getPlatformCurrency(item.platform);
    
    let statusMessage = '';
    let priceMessage = '';
    
    if (item.status === 'sale') {
        statusMessage = `–ó–Ω–∏–∂–∫–∞: ${item.salePercent}%`;
        priceMessage = `–ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞: ${item.price} ${currency}
–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: ${item.salePrice} ${currency}`;
    } else {
        priceMessage = `–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${item.price} ${currency}`;
        if (item.priceChange && item.priceChange !== 0) {
            statusMessage = `–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: ${item.priceChange > 0 ? '+' : ''}${item.priceChange} ${currency}`;
        }
    }
    
    // –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
    const categoryInfo = item.category ? `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${item.category}` : '';
    
    API_CONFIG.showCustomDialog({
        title: productName,
        message: `
${categoryInfo}
${priceMessage}
${statusMessage}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${getPlatformName(item.platform)}
–î–æ–¥–∞–Ω–æ: ${formatDate(item.dateAdded || item.updatedAt)}
URL: ${item.url}
        `,
        buttons: [
            {id: 'visit', type: 'default', text: '–í—ñ–¥–∫—Ä–∏—Ç–∏ URL üåê'},
            {id: 'delete', type: 'destructive', text: '–í–∏–¥–∞–ª–∏—Ç–∏ üóëÔ∏è'},
            {id: 'close', type: 'cancel', text: '–ó–∞–∫—Ä–∏—Ç–∏ ‚úñÔ∏è'}
        ]
    }, function(buttonId) {
        if (buttonId === 'visit') {
            window.open(item.url, '_blank');
        } else if (buttonId === 'delete') {
            const itemId = item.id || item._id || item.productId;
            removeTrackedItem(itemId);
        }
    });
}

// –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä
async function removeTrackedItem(itemId) {
    API_CONFIG.showCustomDialog({
        title: '–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É',
        message: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è?',
        buttons: [
            {id: 'delete', type: 'destructive', text: '–í–∏–¥–∞–ª–∏—Ç–∏ üóëÔ∏è'},
            {id: 'cancel', type: 'cancel', text: '–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚úñÔ∏è'}
        ]
    }, async function(buttonId) {
        if (buttonId === 'delete') {
            // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            API_CONFIG.showToast('–í–∏–¥–∞–ª—è—î–º–æ...');
            
            try {
                // –í–∏–∫–ª–∏–∫ API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
                const response = await fetch(API_CONFIG.getApiUrl(`tracker/remove/${currentUserId}/${itemId}`), {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä');
                }
                
                const data = await response.json();
                
                if (data.success) {
                    // –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                    trackedItems = trackedItems.filter(item => {
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ ID —Ñ–æ—Ä–º–∞—Ç–∏
                        const currentId = item.id || item._id || item.productId;
                        return currentId !== itemId;
                    });
                    
                    // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                    applyFiltersAndSort();
                    
                    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    API_CONFIG.showToast('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è ‚úÖ');
                } else {
                    throw new Error(data.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É:', error);
                API_CONFIG.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ‚ùå');
            }
        }
    });
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function isValidURL(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

function getPlatformFromURL(url) {
    if (url.includes('store.steampowered.com') || url.includes('steamcommunity.com')) {
        return 'steam';
    } else if (url.includes('rozetka.com.ua')) {
        return 'rozetka';
    } else if (url.includes('comfy.ua')) {
        return 'comfy';
    }
    return null;
}

function getPlatformName(platform) {
    switch (platform?.toLowerCase()) {
        case 'steam':
            return 'Steam';
        case 'rozetka':
            return 'Rozetka';
        case 'comfy':
            return 'Comfy';
        default:
            return '–ù–µ–≤—ñ–¥–æ–º–æ';
    }
}

function getPlatformIcon(platform) {
    switch (platform?.toLowerCase()) {
        case 'steam':
            return 'sports_esports';
        case 'rozetka':
        case 'comfy':
            return 'shopping_cart';
        default:
            return 'shopping_bag';
    }
}

function getPlatformCurrency(platform) {
    switch (platform?.toLowerCase()) {
        case 'steam':
            return '‚Ç¥';
        case 'rozetka':
        case 'comfy':
            return '‚Ç¥';
        default:
            return '‚Ç¥';
    }
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';
    
    const date = new Date(dateString);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞
    if (isNaN(date.getTime())) return '–ù–µ–≤—ñ–¥–æ–º–æ';
    
    return new Intl.DateTimeFormat('uk-UA', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }).format(date);
}

function formatTimeAgo(dateString) {
    if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';
    
    const date = new Date(dateString);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞
    if (isNaN(date.getTime())) return '–ù–µ–≤—ñ–¥–æ–º–æ';
    
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffTime / (1000 * 60));
    
    if (diffDays > 30) {
        const diffMonths = Math.floor(diffDays / 30);
        return `${diffMonths} –º—ñ—Å. —Ç–æ–º—É`;
    } else if (diffDays > 0) {
        return `${diffDays} –¥. —Ç–æ–º—É`;
    } else if (diffHours > 0) {
        return `${diffHours} –≥–æ–¥. —Ç–æ–º—É`;
    } else if (diffMinutes > 0) {
        return `${diffMinutes} —Ö–≤. —Ç–æ–º—É`;
    } else {
        return '–©–æ–π–Ω–æ';
    }
}

// –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ seed
function getRandomColor(seed) {
    // –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π –∫–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ seed
    const hue = (String(seed).split('').reduce((a, b) => a + b.charCodeAt(0), 0) % 360);
    return `hsl(${hue}, 70%, 35%)`;
}